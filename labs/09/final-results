Script started on 2020-04-16 17:22:48-0400
]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ cat list_package.adbs
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/17/2020
------------------------------------------------------------------

package List_Package is

   -- the list-type itself (public)
   type List is private;

   -----------------------------------------------------
   -- Initialize a list                                -
   -- Receive: aList, a List.                          -
   -- Pre: aList is uninitialized.                     -
   -- Post: aList%itsFirst == aList%itsLast == NULL && -
   --        aList%itsLength == 0.                     -
   -----------------------------------------------------
   procedure Init(A_List: out List);


   ------------------------------------------------
   -- Is a list empty?                            -
   -- Receive: aList, a List.                     -
   -- Return: true, iff aList contains no values. -
   ------------------------------------------------
   function Empty(A_List: in List) return Boolean;

   -------------------------------------
   -- How many values are in a list?   -
   -- Receive: aList, a List.          -
   -- Return: aList%itsLength.         -
   -------------------------------------
   function Length(A_List : in List) return Integer;


   ----------------------------------------
   -- Append a value to a list.           -
   -- Receive: aValue, an integer,        -
   -- Passback: aList, containing aValue. -
   ----------------------------------------
   procedure Append(A_Value : in Integer; A_List: in out List);


   -------------------------------------
   -- Display the values in a list.    -
   -- Receive: aList, a List.          -
   -- Output: the values in aList.     -
   -------------------------------------
   procedure Put(A_List : in List);

   ---------------------------------------
   -- Find the maximum value in a list.  -
   -- Receive: aList, a List.            -
   -- Return: the maximum value in aList.-
   ---------------------------------------
   function Max(A_List : in List) return Integer;
   

private
   
   type List_Node;
   
   type Node_Ptr is access List_Node;
   
   type List_Node is
      record
	 Its_Value : Integer;
	 Its_Next : Node_Ptr;
      end record;
   
   type List is
      record
	 Its_First : Node_Ptr;
	 Its_Last : Node_Ptr;
	 Its_Length : Integer;
      end record;
   

end List_Package;

]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ cat list_package.ads[Kb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 4/17/2020
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

   -----------------------------------------------------
   -- Initialize a list                                -
   -- Receive: aList, a List.                          -
   -- Pre: aList is uninitialized.                     -
   -- Post: aList%itsFirst == aList%itsLast == NULL && -
   --        aList%itsLength == 0.                     -
   -----------------------------------------------------
   procedure Init(A_List : out List) is
   begin
      A_List.Its_First := null;
      A_List.Its_Last := null;
      A_List.Its_Length := 0;
   end Init;

   ------------------------------------------------
   -- Is a list empty?                            -
   -- Receive: aList, a List.                     -
   -- Return: true, iff aList contains no values. -
   ------------------------------------------------
   function Empty(A_List : in List) return Boolean is
   begin
      return A_List.Its_Length = 0;
   end Empty;

   -------------------------------------
   -- How many values are in a list?   -
   -- Receive: aList, a List.          -
   -- Return: aList%itsLength.         -
   -------------------------------------
   function Length(A_List : in List) return Integer is
   begin
      return A_List.Its_Length;
   end Length;

   ----------------------------------------
   -- Append a value to a list.           -
   -- Receive: aValue, an integer,        -
   -- Passback: aList, containing aValue. -
   ----------------------------------------
   procedure Append(A_Value : in Integer; A_List : in out List) is
      Temp_Ptr : constant Node_Ptr := new List_Node;
   begin
      Temp_Ptr.Its_Value := A_Value;
      Temp_Ptr.Its_Next := null;

      if A_List.Its_Length = 0 then
	 A_List.Its_First := Temp_Ptr;
      else
	 A_List.Its_Last.Its_Next := Temp_Ptr;
      end if;

      A_List.Its_Last := Temp_Ptr;

      A_List.Its_Length := A_List.Its_Length + 1;
   end Append;

   -------------------------------------
   -- Display the values in a list.    -
   -- Receive: aList, a List.          -
   -- Output: the values in aList.     -
   -------------------------------------

   procedure Put(A_List : in List) is
      Temp_Ptr : Node_Ptr := A_List.Its_First;   
   begin
      while Temp_Ptr /= null loop
	 Put(' '); Put(Temp_Ptr.Its_Value);
        Temp_Ptr := Temp_Ptr.Its_Next;
      end loop;
   end Put;

   ---------------------------------------
   -- Find the maximum value in a list.  -
   -- Receive: aList, a List.            -
   -- Return: the maximum value in aList.-
   ---------------------------------------

   function Max(A_List : in List) return Integer is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
      Max_Value : Integer := -999999;
   begin
      while Temp_Ptr /= null loop
	 if Temp_Ptr.Its_Value > Max_Value then
	    Max_Value := Temp_Ptr.Its_Value;
	 end if;
	 Temp_Ptr := Temp_Ptr.Its_Next;
      end loop;
      return Max_Value;      
   end Max;

end List_Package;

]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ cat max.adb
-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:
-- Date:
-------------------------------------------------- 

with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 

procedure Max is 
   -- define 3 lists 
   List1, List2, List3 : List; 
   
begin 
   Init(List1);                -- initialize them 
   Init(List2); 
   Init(List3); 
   
   Append(99, List1);          -- 99, 88, 77, 66, 55 
   Append(88, List1);          -- max is first 
   Append(77, List1); 
   Append(66, List1); 
   Append(55, List1); 
   
   Append(55, List2);          -- 55, 66, 77, 88, 99 
   Append(66, List2);          -- max is last 
   Append(77, List2); 
   Append(88, List2); 
   Append(99, List2); 
   
   Append(55, List3);          -- 55, 77, 99, 88, 66 
   Append(77, List3);          -- max is in the middle 
   Append(99, List3); 
   Append(88, List3); 
   Append(66, List3); 
   
   Put(List1); New_Line;       -- output the 3 lists 
   Put(List2); New_Line; 
   Put(list3); New_Line; 
   -- display their maxima 
   Put("The maximum value in list 1 is ");  
   Put( Max(List1) ); 
   New_Line; 
   Put("The maximum value in list 2 is "); 
   Put( Max(List2) );
   New_Line; 
   Put("The maximum value in list 3 is ");
   Put( Max(List3) );
   New_Line; 
   
end Max; 

]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ cat Makefile
# Makefile for GNAT (Ada) compilation
TARGET = max
PACKAGE = list_package

CC = gcc
CFLAGS = -c -Wall

$(TARGET): $(TARGET).ali $(PACKAGE).o
	gnatbind $(BFLAGS) $(TARGET).ali
	gnatlink $(LFLAGS) $(TARGET).ali -o adaMax

$(TARGET).ali: $(TARGET).adb $(PACKAGE).ads
	$(CC) $(CFLAGS) $(TARGET).adb

$(PACKAGE).o: $(PACKAGE).adb $(PACKAGE).ads
	$(CC) $(CFLAGS) $(PACKAGE).adb

clean:
	rm -f $(TARGET) *~ *# *.o *.ali


]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ make
gnatbind  max.ali
gnatlink  max.ali -o adaMax
]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ ./max[K[K[KadaMax 
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/ada[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/ada[00m$ exit

Script done on 2020-04-16 17:23:53-0400
Script started on 2020-04-17 12:08:03-0500
]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/clojure[00m$ clojure[K[K[K[K[K[K[Kcat listOps.c[K[K[K[K[K[K[K[K[Ksrc.[K/listOps.clj 
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: Jacob Brink
;; Date: 4/17/2020
;; Lab: 09
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (println val1 " " val2)
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listMax [aList]
  (if (and (list? aList) (not (empty? aList)))   
    (let [firstVal (first aList)]
      (if (= (count aList) 1)
        firstVal
        (maxOf2 firstVal (listMax (rest aList)))
      )
    )
    nil
    )
  )

]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/clojure[00m$ cat src/max.clj
;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Jacob Brink
;; Date: 4/17/2020
;; Lab: 09
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
      [ 
       list1 '(99 88 77 66 55)        ; max is first value
       list2 (list 55 66 77 88 99)    ; max is last value
       list3 (list 55 77 99 88 66)    ; max is middle value
       emptyList '()                  ; list is empty
       ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)
    )
  )

]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/clojure[00m$ clojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

66   55
77   66
88   77
99   88
The max value in list1 is:  99
88   99
77   99
66   99
55   99
The max value in list2 is:  99
88   66
99   88
77   99
55   99
The max value in list3 is:  99

The max of an empty list is:  nil

]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/clojure[00m$ exit

Script done on 2020-04-17 12:08:45-0500
Script started on 2020-04-16 16:45:40-0400
]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/java[00m$ cat Max.java
/* Max.java finds the maximum values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Jacob Brink
 * Date: 4/17/2020
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;

public class Max {

    public static void main(String [] args) {
	LinkedList<Integer> list1, list2, list3;
	list1 = new LinkedList<Integer>();
	list2 = new LinkedList<Integer>();
	list3 = new LinkedList<Integer>();

	list1.add(99);    // 99, 88, 77, 66, 55
	list1.add(88);    // max is first
	list1.add(77);
	list1.add(66);  
	list1.add(55);

	list2.add(55);    // 55, 66, 77, 88, 99
	list2.add(66);    // max is last
	list2.add(77);  
	list2.add(88);  
	list2.add(99);  
  
	list3.add(55);    // 55, 77, 99, 88, 66
	list3.add(77);    // max is in the middle
	list3.add(99);  
	list3.add(88);  
	list3.add(66);  

	print(list1); 
	print(list2); 
	print(list3);
	
	//prints max
	System.out.println("Max of list1: " + Collections.max(list1));
    }

    /** print() displays a LinkedList on the console.
     *
     * @param: aList, a LinkedList<Integer>
     * 
     * Postcondition: the Integer values in aList
     *                 have been displayed to System.out,
     *                 separated by spaces.
     */
    public static void print(LinkedList<Integer> aList){
	Iterator<Integer> listIterator = aList.iterator();
	while (listIterator.hasNext()){
	    System.out.print(listIterator.next() + " ");
	}
	System.out.print('\n');
    }
    

}

]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/java[00m$ javac Max.java
]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/java[00m$ java Max
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
Max of list1: 99
]0;jacob@DESKTOP-TMA4I98: ~/214/labs/09/java[01;32mjacob@DESKTOP-TMA4I98[00m:[01;34m~/214/labs/09/java[00m$ exit

Script done on 2020-04-16 16:46:04-0400
Script started on 2020-04-17 12:07:23-0500
]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/ruby[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/ruby[00m$ cat max.rb 
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/17/2020
# Lab: 09
###################################################

require './List'

list1 = List.new
list2 = List.new
list3 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)

list1.print 
puts
 puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/ruby[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/ruby[00m$ cat List.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 4/17/2020
# Lab: 09
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

  # initialize a List to be empty
  # Postcondition: first == nil and last == nil and length == 0
  def initialize
    @first = nil
    @last = nil
    @length = 0
  end

  
  # create reader method for length
  attr_reader :length


  # Am I empty?
  # Return: length == 0
  def empty?
    @length == 0
  end
  
  # append a value to me
  # Receive: value, the item to be appended
  # Postcondition: my last item is value and
  #                 my length is one more than it was
  def append(value)
    newNode = Node.new(value, nil)

    if empty?
      @first = newNode
    else
      @last.next = newNode      
    end

    @last = newNode
    @length += 1
    self
  end


  # print my items
  # Postcondition: my items have been displayed to the screen

  def print
    temp = @first
    while !temp.nil?
      printf " #{temp.value}"
      temp = temp.next
    end
  end


  # find my maximum item
  # Return: my maximum item
  def max
    temp = @first
    maxValue = -99999
    while !temp.nil?
      if temp.value > maxValue then
        maxValue = temp.value
      end
      temp = temp.next
    end
    maxValue
  end


  # Replace this line with a declaration for class Node
  #  (and its methods)
  class Node
    def initialize(item, link)
      @value = item
      @next = link
    end

    attr_reader :value
    attr_accessor :next
  end
  
end

]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/ruby[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/ruby[00m$ cat List.rbmax.rb ls[Kcd clojurels[Kcd 09[3Pls[K[Kruby max.rb 
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
]0;jacob@DESKTOP-QKT72KA: ~/214/labs/09/ruby[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/labs/09/ruby[00m$ exit

Script done on 2020-04-17 12:07:44-0500
