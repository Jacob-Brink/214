;; reverse.clj "test-drives" function reverse-simple() and super-reverse().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m reverse
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Jacob Brink
;; Date: 5/5/2020
;; Lab: 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns reverse)

;; harder (recursive) solution
(defn sum [aVec]
  (if (vector? aVec)      ; if aVec is a vector
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;     return 0
      (+ (peek aVec)      ;   else return the last value
         (sum (pop aVec)) ;    + sum(all but the last value)
         )
      )
    )
  )

;; reverse function
(defn reverse-simple [listA reverseList]
  (if (= (count listA 1))
         (conj reverseList (first listA)) ;;end recursion by returning reverseList with first number (really last number in original listA) to beginning of reverseList
         (conj (reverse-simple (rest listA) reverseList) (first listA))
         )    
    )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; main function to test functions sum() and average()
  ;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn -main []
    (let
        [ emptyVec []
         testVec  [9.0 8.0 7.0 6.0]
         ]

      (print "\nThe empty vec: " emptyVec) 
      (print "\nThe test  vec: " testVec) 
      (println "\n")

      ;; Test sum()...
      (printf "\nThe first sum is %.3f\n" (sum emptyVec))
      (printf "The second sum is %.3f\n" (sum testVec))

      ;; Test average()...
      (printf "\nThe firsgggt average is %.3f\n" (average emptyVec))
      (printf "The second average is %.3f\n" (average testVec))
      (println "\n")

      ;; Test sum2()...
      (printf "\nThe first sum2 is %.3f\n" (sum2 emptyVec))
      (printf "The second sum2 is %.3f\n" (sum2 testVec))
      (println "\n")
      )
    )

