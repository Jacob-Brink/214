Script started on 2020-05-05 20:07:59-0400
]0;jpb34@cs-ssh: ~/Documents/214/labs/extrajpb34@cs-ssh:~/Documents/214/labs/extra$ cat src/misc.clj
;; misc.clj "test-drives" function member?() and subsequence().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m misc
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Jacob Brink
;; Date: 5/5/2020
;; Lab: Extra Credit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns misc)

;; misc function
(defn member? [item listA]
  (if (empty? listA)
    false
    (if (= (count listA) 1)
      (= (first listA) item)
      (if (= (first listA) item)
        true
        (member? item (rest listA))
        )
      )
    )
  )


;; super-misc function
(defn subsequence [listA i j]
  (if (or (>= i (count listA)) (>= (+ j i) (count listA)))
    nil

    ;; add current element to sub sequence if i is less than 0 and j is greater than 0 (which means current item is in subsequence)
    (if (<= i 0)
      (if (> j 1)
        (conj (subsequence (rest listA) (dec i) (dec j)) (first listA)) 
        (if (= j 1) (list (first listA))) ;; base case: return list containing only last element of sub sequence
        )
      (subsequence (rest listA) (dec i) j)
      )
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (print "\n Testing Member? \n\n")
  (loop [ meta '(
                 [((1 2) 3 (4 (5 6))) (1 2) true]
                 [((1 2) 3 (4 (5 6))) 3 true]
                 [((1 2) 3 (4 (5 6))) (4 (5 6)) true]
                 [((1 2) 3 (4 (5 6))) 1 false]
                 [((1 2) 3 (4 (5 6))) 2 false]
                 [((1 2) 3 (4 (5 6))) 4 false]
                 )]
    (when (not (empty? meta))
      
      (let [currentList (first meta)
            searchItem (get currentList 1)
            searchList (get currentList 0)
            searchSuccessExpected (get currentList 2)]

        (printf "    Searching %s for item %s should be %s. Search returns %s. %s \n"
                searchList
                searchItem
                searchSuccessExpected
                (member? searchItem searchList)
                (if (= searchSuccessExpected (member? searchItem searchList)) "Success!" "Failure!")
                )
        (recur (rest meta))          
        )
      )

    )

  (print "\n\n Testing Subsequence \n\n")

  
  (loop [ meta '(
                 [(1 2 (3 4) (5 (6 7))) 1 2 (2 (3 4))]
                 [(1 2 3 4 5 6 7) 2 4 (3 4 5 6)]
                 [(1 2 3) 5 6 nil]
                 )]
    (when (not (empty? meta))
      
      (let [currentTest (first meta)
            sequence (get currentTest 0)
            i (get currentTest 1)
            j (get currentTest 2)
            result (get currentTest 3)
            ]

        (printf "    (subsequence %s %s %s) is %s. %s\n" sequence i j (subsequence sequence i j) (if (= result (subsequence sequence i j)) "Success!" "Fail!"))
        (recur (rest meta))          
        )
      )

    )

  (print "\n\n")
  )
]0;jpb34@cs-ssh: ~/Documents/214/labs/extrajpb34@cs-ssh:~/Documents/214/labs/extra$ cat src/reverse.clj
;; reverse.clj "test-drives" function reverse-simple() and super-reverse().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m reverse
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Jacob Brink
;; Date: 5/5/2020
;; Lab: 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns reverse)

;; reverse function
(defn reverse-simple [listA reverseList]
  (if (= (count listA) 1)
    (conj reverseList (first listA)) ;;end recursion by returning reverseList with first number (really last number in original listA) to beginning of reverseList
    (reverse-simple (rest listA) (conj reverseList (first listA)))         
    )
  )


;; super-reverse function
(defn super-reverse [listA reverseList]
  (let [item
        (if (list? (first listA))
               (super-reverse (first listA) '())
               (first listA)
               )

        ]
    (if (= (count listA) 1)
      (conj reverseList item) ;;end recursion by returning reverseList with first number (really last number in original listA) to beginning of reverseList
      (super-reverse (rest listA) (conj reverseList item))         
      )
    
    )
  
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (loop [ meta '(
                (12 3 4 5)
                ((4 5) 6 7 8)
                (a b (c d) (e (f g)))
                )]
    (when (not (empty? meta))
      (print "Original List Is " (first meta))
      (print "\nReversed List Is " (reverse-simple (first meta) '()))
     (print "\nSuper Reversed List Is " (super-reverse (first meta) '()))
      (print "\n\n")
      (recur (rest meta))          
      )
    )

  ) 
]0;jpb34@cs-ssh: ~/Documents/214/labs/extrajpb34@cs-ssh:~/Documents/214/labs/extra$ clojure -m reverse
Original List Is  (12 3 4 5)
Reversed List Is  (5 4 3 12)
Super Reversed List Is  (5 4 3 12)

Original List Is  ((4 5) 6 7 8)
Reversed List Is  (8 7 6 (4 5))
Super Reversed List Is  (8 7 6 (5 4))

Original List Is  (a b (c d) (e (f g)))
Reversed List Is  ((e (f g)) (c d) b a)
Super Reversed List Is  (((g f) e) (d c) b a)

]0;jpb34@cs-ssh: ~/Documents/214/labs/extrajpb34@cs-ssh:~/Documents/214/labs/extra$ clojure -m reverse       misc

 Testing Member? 

    Searching ((1 2) 3 (4 (5 6))) for item (1 2) should be true. Search returns true. Success! 
    Searching ((1 2) 3 (4 (5 6))) for item 3 should be true. Search returns true. Success! 
    Searching ((1 2) 3 (4 (5 6))) for item (4 (5 6)) should be true. Search returns true. Success! 
    Searching ((1 2) 3 (4 (5 6))) for item 1 should be false. Search returns false. Success! 
    Searching ((1 2) 3 (4 (5 6))) for item 2 should be false. Search returns false. Success! 
    Searching ((1 2) 3 (4 (5 6))) for item 4 should be false. Search returns false. Success! 


 Testing Subsequence 

    (subsequence (1 2 (3 4) (5 (6 7))) 1 2) is (2 (3 4)). Success!
    (subsequence (1 2 3 4 5 6 7) 2 4) is (3 4 5 6). Success!
    (subsequence (1 2 3) 5 6) is null. Success!


]0;jpb34@cs-ssh: ~/Documents/214/labs/extrajpb34@cs-ssh:~/Documents/214/labs/extra$ [K]0;jpb34@cs-ssh: ~/Documents/214/labs/extrajpb34@cs-ssh:~/Documents/214/labs/extra$ exit

Script done on 2020-05-05 20:09:50-0400
