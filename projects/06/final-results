Script started on 2020-03-20 12:39:28-0500
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ ./arrayprocessing [11@gnatmake arrayprocessing.adb[C[6Pcat arrayprocessing.adb
-- ArrayProcessing.adb "test-drives" function PrintArray and InputArray.
-- Precondition:  given size is positive
-- Output: none
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 3/17/2020
-- Project: 06
-----------------------------------------------

with Ada.Integer_Text_Io; use Ada.Integer_Text_Io;
with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure ArrayProcessing is

   -- Declare Vector type
   type Vector is array ( Positive range <>) of Float;
   ArraySize : Positive;
   
----------------------------------------------
-- Printer() prints the values in an array   -
-- Receive: A, an array of numbers     -
-- Return: void                              -
----------------------------------------------
   procedure Printer(A: Vector) is 
   begin 
      for I in A'Range 
      loop 
	 Ada.Float_Text_Io.Put(Item => A(I));
	 New_Line;
      end loop; 
   end Printer;
   
   
----------------------------------------------
-- InputArray() fills given array with input -
-- Receive: A, an array of numbers           -
-- Return: void                              -
----------------------------------------------
   procedure InputArray(A: in out Vector) is 
   begin 
      for I in A'Range 
      loop 
	 Put(I);
	 Put(": ");
	 Ada.Float_Text_Io.Get(Item => A(I));
	 New_Line;
      end loop; 
   end InputArray;

   
   
   
begin
   Put(" enter size of array: ");
   Ada.Integer_Text_Io.Get(Item => ArraySize);
   
   declare
      UserArray : Vector(1..ArraySize);
   begin 
      InputArray(UserArray);
      Printer(UserArray);
   end;
    
   New_line;
end ArrayProcessing;

]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ cat arrayprocessing.adb[5P./arrayprocessing [11@gnatmake arrayprocessing.adb[C
x86_64-linux-gnu-gcc-7 -c arrayprocessing.adb
x86_64-linux-gnu-gnatbind-7 -x arrayprocessing.ali
x86_64-linux-gnu-gnatlink-7 arrayprocessing.ali
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ gnatmake arrayprocessing.adb [6Pcat arrayprocessing.adb[5P./arrayprocessing 
 enter size of array: 4
          1: 1

          2: 3

          3: 2

          4: 4

 1.00000E+00
 3.00000E+00
 2.00000E+00
 4.00000E+00

]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ exit

Script done on 2020-03-20 12:39:51-0500
Script started on 2020-03-20 12:41:27-0500
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06/clojure[00m$ clojur[K[K[K[K[Kat src/a[KA[Karrayprocessing.clj
;; arrayprocessing.clj "test-drives" function arrayprocessing() and arrayinput().
;; precondition: size given is nonnegative
;; Output: the arrayprocessing of a sequence of numbers.
;;
;; Usage: clojure -m arrayprocessing
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Jacob Brink
;; Date: 3/19/2020
;; Project: 06
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns arrayprocessing)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; arrayprocessing() prints the values of the given array
;; Receive: aVec, a vector of numbers. 
;; Return: the arrayprocessing of the numbers in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
(defn arrayprocessing [array]
  (loop [i 0]
    (if (< i (count array))
      (do
        (printf "%.3f\n" (get array i))
        (recur (inc i))
        )
      )
    )
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; arrayinput inputs the values in a vector.       
;; Receive: arraySize an integer
;; Return: array filled with user input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn arrayinput [arraySize]
  (loop [i 0 array []]
    (if (< i arraySize)
      (do (print "Enter value: ") (flush)
          (let [userInput (float (read))]
            (recur (inc i) (conj array userInput))
         )
          )
      array
      )
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and arrayprocessing()
;; Output: the sum and arrayprocessing of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (print "\nEnter Size: ") (flush)

  (let [ arraySize (int (read)) ]
    (arrayprocessing (arrayinput arraySize))
    )

)

]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06/clojure[00m$ cat src/arrayprocessing.clj[4Pruby ArrayProcessing.rb[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kclojure -m ArrayProcessing[C[1Processingprocessing[1Prrayprocessingarrayprocessing

Enter Size: 4
Enter value: 1
Enter value: 2
Enter value: 3
Enter value: 4
1.000
2.000
3.000
4.000
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06/clojure[00m$ clojure -m arrayprocessing

Enter Size: 0
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06/clojure[00m$ clojure -m arrayprocessing

Enter Size: -1
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06/clojure[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06/clojure[00m$ exit

Script done on 2020-03-20 12:42:28-0500
Script started on 2020-03-20 12:34:06-0500
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ cat ArrayProcessing.java
/* ArrayProcessing.java is a driver for method avg().
 *
 * Started by: Prof. Adams, for CS 214 at Calvin College
 * 
 * Project: 06
 * Student Name: Jacob Brink
 * Date: 3/17/2020
 *
 * Precondition: size is positive
 * Output: the ArrayProcessing of the numbers in theArray.
 ***************************************************************/

import java.io.*;
import java.util.Scanner;

public class ArrayProcessing
{
    public static Scanner keyboard;
    
  public static void main(String[] args) {
      keyboard = new Scanner(System.in);
      System.out.println("Enter size of array: "); 
      if (keyboard ==null)
	  System.out.println("hello");
      int size = keyboard.nextInt();
      double[] anArray = new double[size];
      arrayFiller(anArray);
      printer(anArray);
  }

  
  /* arrayFiller() is a method that reads user input into the values of the array
   * in an array.
   * Receive: anArray, an array of doubles.
   * Return: void
   **************************************************************/
  public static void arrayFiller(double anArray[]) {
     for (int i = 1; i <= anArray.length; i++) {
	  System.out.println(String.format("Enter value for element %s", i));
	  double value = keyboard.nextDouble();
	  anArray[i-1] = value;
      }
  }
  

  /* printer() is a method that prints the values of the array
   * in an array.
   * Receive: anArray, an array of doubles.
   * Return: void (prints the values separated by new lines)
   **************************************************************/
  public static void printer(double anArray[]) {
      System.out.println("Values you entered are:");
      for (double value : anArray)
	  System.out.println(value);
  }
    
}

]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ javac ArrayProcessing.java 
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ java ArrayProcessing 
Enter size of array: 
5
Enter value for element 1
1
Enter value for element 2
5
Enter value for element 3
2
Enter value for element 4
3
Enter value for element 5
4
Values you entered are:
1.0
5.0
2.0
3.0
4.0
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ java ArrayProcessing 
Enter size of array: 
0
Values you entered are:
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ java ArrayProcessing 
Enter size of array: 
-1
Exception in thread "main" java.lang.NegativeArraySizeException: -1
	at ArrayProcessing.main(ArrayProcessing.java:26)
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ exit

Script done on 2020-03-20 12:34:40-0500
Script started on 2020-03-20 12:40:35-0500
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ cat ArrayProcessing.rb
# ArrayProcessing.rb creates a string of numbers from the user and prints them
# Precondition: size input is greater than or equal to 0
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 3/20/2020
# Project: 06
########################################################

###############################################
# fillarray() fills the array with user input
# Receive: anArray, an array of numbers
# Return: array populated with user input
################################################
def fillArray (arraySize)
  array = Array.new(arraySize)
  for i in 1..arraySize
    print "Enter element #{i}: "
    array[i-1] = gets.to_f
    puts "\n"
  end
  array
end

################################################
# process() prints the elements of the given array
# Receive: an array of numeric values 
# Return: void
######################################################
def process (array)
  array.each { |elem| print "#{elem}\n" }
end


if __FILE__ == $0
  print "Enter size: ";
  size = gets.to_i
  puts "\n";
  process(fillArray(size));
end


]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ gnatmake[K[K[K[K[K[K[K[Kruby ArrayProcessing.rb
Enter size: 4

Enter element 1: 4

Enter element 2: 2

Enter element 3: 1

Enter element 4: 3

4.0
2.0
1.0
3.0
]0;jacob@DESKTOP-QKT72KA: ~/214/projects/06[01;32mjacob@DESKTOP-QKT72KA[00m:[01;34m~/214/projects/06[00m$ exit

Script done on 2020-03-20 12:41:04-0500
