Script started on 2020-03-12 20:56:48-0400
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ cat roots.adb
-- Roots.adb finds the roots for a quadratic equation if valid
--
-- Input: A, B, C as Floats
-- Precondition: 
-- Output: The roots to the quadratic equation
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Jacob Brink
-- Date: 3/11/2020
-- Project: 5
--------------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO, Ada.Strings.Fixed, Ada.Numerics.Elementary_Functions;
use  Ada.Text_IO, Ada.Integer_Text_IO, Ada.Strings.Fixed, Ada.Numerics.Elementary_Functions;

procedure Roots is

   
   A, B, C, Root1, Root2 : Float;
   Valid_Quad : Boolean;
   
   ------------------------------------------------
   -- rooter() finds roots to equation           
   -- Receive: A, B, and C as parameters of quadratic formula
   -- Passback: Roots if they exist
   -- Returns: true if valid quadratic formula, else false
   ------------------------------------------------
   function rooter(A, B, C : in Float; Root1, Root2 : out Float) return Boolean is
      Arg : Float;
   begin
      Arg := ((B ** 2) - (4.0 * A * C));
      Put(Float'Image(Arg));
      if A = 0.0 then
	 Put_Line("A cannot be zero!");
	 Root1 := 0.0;
	 Root2 := 0.0;
	 return False;
      else
	 if Arg >= 0.0 then
	    Root1 := (-B + Sqrt(Arg))/(2.0*A);
	    Root2 := (-B - Sqrt(Arg))/(2.0*A);
	    return True;
	 else
	   Put_Line("rooter(): b^2 - 4ac is negative");
	   Root1 := 0.0;
	   Root2 := 0.0;
	   return False;
	 end if;
	 
      end if;
      
   end rooter;
     


begin                                           -- Prompt for input
   Put("Enter A:");
   A := Float'Value(Get_Line);
   
   Put("Enter B:");
   B := Float'Value(Get_Line);
   
   Put("Enter C:");
   C := Float'Value(Get_Line);
   
   Valid_Quad := Rooter(A, B, C, Root1, Root2);
   
   if Valid_Quad = True then
      Put("The roots are ");
      Put(Float'Image(Root1));
      Put(" and ");
      Put(Float'Image(Root2));
   end if;
   
      
   
end Roots;

]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ gnatmake roots.adb
x86_64-linux-gnu-gcc-7 -c roots.adb
x86_64-linux-gnu-gnatbind-7 -x roots.ali
x86_64-linux-gnu-gnatlink-7 roots.ali
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ ./roots 
Enter A:1
Enter B:1
Enter C:1
-3.00000E+00rooter(): b^2 - 4ac is negative
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ 
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ ./roots 
Enter A:0
Enter B:1
Enter C:1
 1.00000E+00A cannot be zero!
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ ./roots 
Enter A:2
Enter B:5
Enter C:3
 1.00000E+00The roots are -1.00000E+00 and -1.50000E+00
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ exit

Script done on 2020-03-12 20:57:49-0400
Script started on 2020-03-12 20:58:50-0400
]0;jpb34@gold01: ~/Documents/214/projects/05/clojure[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05/clojure[00m$ clojur      cat sr /  c/roo` ts.clj
;;;; roots.clj returns roots and boolean in vector indicating whether results are valid
;;;;
;;;; Input: A, B, and C that are floats
;;;; Output: vector with roots and boolean
;;;;
;;;; Usage: clojure -m roots
;;;;
;;;; Begun by: Dr. Adams, for CS 214 at Calvin College.
;;;; Completed by: Jacob Brink
;;;; Project: 5
;;;; Date: 3/11/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns roots)      ; name the program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; roots() returns roots and boolean in vector indicating whether results are valid
;;; Receive: a, b, and c that are floats
;;; Return: vector with roots and boolean
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn rooter [a b c]
  (if (not= a 0.0)
    (let [arg (- (* b b) (* 4 a c))]

      (if (>= arg 0)
        (vector
         true
         (/ (+ (- b) (Math/sqrt arg)) (* 2 a))
         (/ (- (- b) (Math/sqrt arg)) (* 2 a)))
        
        (do (println "rooter(): b^2 -4ac is negative!")
            (vector false 0.0 0.0))
      )
      )

    (do (println "rooter(): a is zero!")
        (vector false 0.0 0.0))
    
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; main function
;;; Input: a, b, and c
;;; Output: roots if valid, else false and 0's are returned 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main []

 (println "Enter a: ") (flush)
 (let [ a (double (read)) ]
     (println "Enter b: ") (flush)
     (let [b (double (read))]
       (println "Enter c: ")
       (let [c (double (read))]
         (dorun (map println (rooter a b c)))
       )
     )
)
)
]0;jpb34@gold01: ~/Documents/214/projects/05/clojure[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05/clojure[00m$ clojure -m roots
Enter a: 
1
Enter b: 
1
Enter c: 
1
rooter(): b^2 -4ac is negative!
false
0.0
0.0
]0;jpb34@gold01: ~/Documents/214/projects/05/clojure[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05/clojure[00m$ clojure -m roots
Enter a: 
0
Enter b: 
1
Enter c: 
1
rooter(): a is zero!
false
0.0
0.0
]0;jpb34@gold01: ~/Documents/214/projects/05/clojure[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05/clojure[00m$ clojure -m roots
Enter a: 
2
Enter b: 
5
Enter c: 
3
true
-1.0
-1.5
]0;jpb34@gold01: ~/Documents/214/projects/05/clojure[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05/clojure[00m$ exit

Script done on 2020-03-12 21:00:00-0400
Script started on 2020-03-12 20:54:01-0400
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ javac Roots.java 
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ j java Roots 

Enter A: 
1

Enter B: 
1

Enter C: 
1

*** quadraticRoots(): b^2 - 4ac is negative!
The given parameters do not yield roots
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ java Roots 

Enter A: 
0

Enter B: 
1

Enter C: 
1

*** QuadraticRoots(): a is zero!
The given parameters do not yield roots
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ java Roots 

Enter A: 
2

Enter B: 
5

Enter C: 
3
The roots are -1.0 and -1.5
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ jav   cat Roots.. java
/* Root.java is a class and program that calculates roots if given quadratic parameters are valid
 * 
 * Begun by: Serita Nelesen
 * Completed by: Jacob Brink
 * Date: 3/11/2020
 * Project: 5
 ***************************************************************/

import java.util.Scanner;
import java.lang.Math;

// java class Split
public class Roots
{

  // main program
  public static void main(String[] args)
    {
      Scanner keyboard = new Scanner(System.in);
      // prompt for the string
      System.out.println("\nEnter A: ");
      double a = keyboard.nextDouble();

      System.out.println("\nEnter B: ");
      double b = keyboard.nextDouble();

      System.out.println("\nEnter C: ");
      double c = keyboard.nextDouble();

      double[] roots = new double[2];
      if (rooter(a, b, c, roots))
	  System.out.println(String.format("The roots are %s and %s", roots[0], roots[1]));
      else
	  System.out.println("The given parameters do not yield roots");
      
    }
  
  /* rooter() returns true for valid quadratic input, false else and modifies the given int array with the roots
   * Receive: 	a, b, c, and an integer array of size 2 that will store the results if valid
   *****************************************************/
    public static boolean rooter(double a, double b, double c, double[] roots) {

	int root1,root2;

	if (a != 0) {

	    double arg = Math.pow(b, 2.0) - 4 * a * c;

	    if (arg >= 0) {
		roots[0] = (-b + Math.sqrt(arg))/(2*a);
		roots[1] = (-b - Math.sqrt(arg))/(2*a);
		return true;
	    } else {
		System.out.println("\n*** quadraticRoots(): b^2 - 4ac is negative!");
		roots[0] = roots[1] = 0.0;
		return false;
	    }
	} else {
	    System.out.println("\n*** QuadraticRoots(): a is zero!");
	    roots[0] = roots[1] = 0.0;
	    return false;
	}
    }


}
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ exit

Script done on 2020-03-12 20:56:35-0400
Script started on 2020-03-12 21:00:16-0400
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ cat roots.rb
# roots.rb rootss a string into two substrings.
#
# Input: a, b, and c
# Output: roots to quadratic equation if valid, false and 0's otherwise
#
# Begun by: Prof. Adams, for CS 214 at Calvin College.
# Completed by: Jacob Brink
# Date: 3/7/2020
# Project: 5
#################################################################


# roots() finds roots
# Input: a, b, and c
# Output: roots to quadratic equation if valid, false and 0's otherwise
######################################################

def roots (a, b, c)
  array = Array.new(3)
  if a != 0
    arg = b*b - 4 * a * c
    if arg >= 0
      array[0] = true
      array[1] = (-b + Math.sqrt(arg))/(2*a)
      array[2] = (-b - Math.sqrt(arg))/(2*a)
    else
      print " roots(): b^2 - 4ac is negative!"
      array[0] = false
      array[1] = array[2] = 0.0      
    end
  else
    print " roots(): a is zero!"
    array[0] = false
    array[1] = array[2] = 0.0
  end
  array
end


if __FILE__ == $0
  print "Enter A: "; 
  a = gets.to_f

  print "Enter B: "; 
  b = gets.to_f

  print "Enter C: "; 
  c = gets.to_f

  results = roots(a,b,c)

  puts "\n"
  print "Roots are #{results[1]} and #{results[2]}\n"
  
end
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ ruby roots.rb
Enter A: a 1
Enter B: 2 1
Enter C: 1
 roots(): b^2 - 4ac is negative!
Roots are 0.0 and 0.0
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ ruby roots.rb
Enter A: 0\ 
Enter B: 1
Enter C: 1
 roots(): a is zero!
Roots are 0.0 and 0.0
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ ruby roots.rb
Enter A: 2
Enter B: 5
Enter C: 3

Roots are -1.0 and -1.5
]0;jpb34@gold01: ~/Documents/214/projects/05[01;32mjpb34@gold01[00m:[01;34m~/Documents/214/projects/05[00m$ exit

Script done on 2020-03-12 21:00:47-0400
